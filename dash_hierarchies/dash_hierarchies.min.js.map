{"version":3,"file":"dash_hierarchies.min.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external window \"React\"","webpack:///external window \"PropTypes\"","webpack:///./src/lib/components/GenericTableHierarchy.react.js","webpack:///./src/lib/components/SimpleHierarchy.react.js","webpack:///./src/lib/components/TableHierarchy.react.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","var getCurrentScript = function() {\n    var script = document.currentScript;\n    if (!script) {\n        /* Shim for IE11 and below */\n        /* Do not take into account async scripts and inline scripts */\n\n        var doc_scripts = document.getElementsByTagName('script');\n        var scripts = [];\n\n        for (var i = 0; i < doc_scripts.length; i++) {\n            scripts.push(doc_scripts[i]);\n        }\n\n        scripts = scripts.filter(function(s) { return !s.async && !s.text && !s.textContent; });\n        script = scripts.slice(-1)[0];\n    }\n\n    return script;\n};\n\nvar isLocalScript = function(script) {\n    return /\\/_dash-component-suites\\//.test(script.src);\n};\n\nObject.defineProperty(__webpack_require__, 'p', {\n    get: (function () {\n        var script = getCurrentScript();\n\n        var url = script.src.split('/').slice(0, -1).join('/') + '/';\n\n        return function() {\n            return url;\n        };\n    })()\n});\n\nif (typeof jsonpScriptSrc !== 'undefined') {\n    var __jsonpScriptSrc__ = jsonpScriptSrc;\n    jsonpScriptSrc = function(chunkId) {\n        var script = getCurrentScript();\n        var isLocal = isLocalScript(script);\n\n        var src = __jsonpScriptSrc__(chunkId);\n\n        if(!isLocal) {\n            return src;\n        }\n\n        var srcFragments = src.split('/');\n        var fileFragments = srcFragments.slice(-1)[0].split('.');\n\n        fileFragments.splice(1, 0, \"v0_0_5m1749108618\");\n        srcFragments.splice(-1, 1, fileFragments.join('.'))\n\n        return srcFragments.join('/');\n    };\n}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"PropTypes\"];","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * GenericTableHierarchyRow - Renders a single row in the hierarchical table\n * \n * @param {Object} props - Component props\n * @param {Object} props.item - Row data containing optional children array and arbitrary data fields\n * @param {number} props.level - Current nesting level for indentation\n * @param {Array} props.columns - Array of column objects with name properties to display\n * @param {Function} props.onRowClick - Callback function when row is clicked\n * @param {Object} props.colors - Object containing hoverColor and selectedColor values\n * @param {string} props.uniqueKey - Property name to use as unique identifier for each row\n * @param {Object} props.selectedRow - Currently selected row data (for highlighting)\n * @param {string} props.dataKey - Key to use when comparing selected row with current row\n * @param {string} props.highlightKey - Optional secondary key to check for highlighting\n * @param {Object} props.expandedRows - Map of expanded row IDs\n * @param {Function} props.setExpandedRows - Function to update expanded rows state\n * @returns {React.ReactNode} - Rendered row with optional children\n */\nconst GenericTableHierarchyRow = ({\n  item,\n  level = 0,\n  columns,\n  onRowClick,\n  colors,\n  uniqueKey,\n  selectedRow,\n  dataKey,\n  highlightKey,\n  expandedRows,\n  setExpandedRows\n}) => {\n  // State for hover effect\n  const [isHovered, setIsHovered] = useState(false);\n  \n  // Determine if this item has children\n  const hasChildren = item.children && item.children.length > 0;\n  \n  // Calculate indentation based on nesting level\n  const indentPadding = `${level * 20}px`;\n  \n  // Generate a unique identifier for this row\n  const rowId = item[uniqueKey] || `row-${level}-${JSON.stringify(item).slice(0, 20)}`;\n  \n  // Check if this row is currently expanded\n  const isExpanded = expandedRows[rowId] || false;\n  \n  // Toggle expanded state\n  const toggleExpand = (e) => {\n    e.stopPropagation(); // Prevent row selection when clicking the toggle button\n    \n    if (hasChildren) {\n      // Update the expanded rows map\n      setExpandedRows(prev => {\n        const newExpandedRows = { ...prev };\n        if (newExpandedRows[rowId]) {\n          delete newExpandedRows[rowId];\n        } else {\n          newExpandedRows[rowId] = true;\n        }\n        return newExpandedRows;\n      });\n    }\n  };\n  \n  // Handle row click\n  const handleRowClick = () => {\n    if (onRowClick) {\n      onRowClick(item);\n    }\n  };\n  \n  // Determine if this row is selected\n  const isSelected = selectedRow && \n    (selectedRow[dataKey] === item[dataKey] || \n    (highlightKey && selectedRow[highlightKey] === item[highlightKey]));\n  \n  // Function to render caret for expandable rows\n  const renderCaret = () => {\n    if (!hasChildren) {\n      // Empty space for alignment\n      return <span style={{ width: '20px', display: 'inline-block' }}></span>;\n    }\n    \n    return (\n      <button\n        onClick={toggleExpand}\n        aria-expanded={isExpanded}\n        aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n        style={{\n          background: 'none',\n          border: 'none',\n          cursor: 'pointer',\n          padding: '0',\n          width: '20px',\n          height: '20px',\n          display: 'inline-flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        }}\n      >\n        {isExpanded ? (\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n            <path d=\"m6 9 6 6 6-6\"/>\n          </svg>\n        ) : (\n          <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n            <path d=\"m9 18 6-6-6-6\"/>\n          </svg>\n        )}\n      </button>\n    );\n  };\n\n  return (\n    <>\n      {/* Item Row */}\n      <tr \n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        onClick={handleRowClick}\n        style={{ \n          cursor: 'pointer',\n          backgroundColor: isSelected ? colors.selectedColor : (isHovered ? colors.hoverColor : 'transparent'),\n          transition: 'background-color 0.15s ease-in-out'\n        }}\n      >\n        {/* Column cells */}\n        {columns.map((column, colIndex) => {\n          const cellValue = item[column.name] !== undefined ? item[column.name] : '';\n          const isFirstColumn = colIndex === 0;\n          \n          return (\n            <td \n              key={`${rowId}-${column.name}`}\n              style={{\n                padding: '8px 12px',\n                borderBottom: '1px solid #e5e7eb',\n                borderRight: '1px solid #e5e7eb',\n                textAlign: column.align || 'left',\n                ...(column.width ? { width: column.width } : {})\n              }}\n            >\n              {isFirstColumn ? (\n                <div style={{ \n                  display: 'flex', \n                  alignItems: 'center', \n                  paddingLeft: indentPadding \n                }}>\n                  {renderCaret()}\n                  <span style={{ marginLeft: '8px' }}>{cellValue}</span>\n                </div>\n              ) : (\n                cellValue\n              )}\n            </td>\n          );\n        })}\n      </tr>\n      \n      {/* Render Children if Expanded */}\n      {hasChildren && isExpanded && (\n        <>\n          {item.children.map((child, index) => (\n            <GenericTableHierarchyRow\n              key={`${child[uniqueKey] || index}`}\n              item={child}\n              level={level + 1}\n              columns={columns}\n              onRowClick={onRowClick}\n              colors={colors}\n              uniqueKey={uniqueKey}\n              selectedRow={selectedRow}\n              dataKey={dataKey}\n              highlightKey={highlightKey}\n              expandedRows={expandedRows}\n              setExpandedRows={setExpandedRows}\n            />\n          ))}\n        </>\n      )}\n    </>\n  );\n};\n\n/**\n * GenericTableHierarchy - A component for displaying hierarchical data in a simple table format\n * with expandable rows and row selection.\n * \n * @param {Object} props - Component props\n * @param {string} props.id - The ID used to identify this component\n * @param {Array} props.data - Array of data items with optional children arrays\n * @param {Array} props.columns - Array of column definitions with name properties\n * @param {Object} props.colors - Custom colors for hover and selection states\n * @param {string} props.uniqueKey - Property name to use as unique identifier for rows\n * @param {Object} props.selectedRow - Currently selected row data\n * @param {string} props.dataKey - Key to use when comparing selected row with current row\n * @param {string} props.highlightKey - Optional secondary key to check for highlighting\n * @param {Object} props.style - Custom styles to apply to the container\n * @param {string} props.className - CSS class names to apply to the container\n * @param {Function} props.setProps - Callback to update props\n * @returns {React.ReactNode} - Rendered hierarchical table component\n */\nconst GenericTableHierarchy = (props) => {\n  const { \n    id,\n    data = [],\n    columns = [],\n    colors = { hoverColor: '#f5f5f5', selectedColor: '#e6f7ff' },\n    uniqueKey = 'id',\n    selectedRow = null,\n    dataKey = uniqueKey,\n    highlightKey = null,\n    style = {},\n    className = '',\n    setProps\n  } = props;\n\n  // State to track expanded rows\n  const [expandedRows, setExpandedRows] = useState({});\n  \n  // Tooltip state\n  const [tooltip, setTooltip] = useState({ content: '', visible: false, x: 0, y: 0 });\n  \n  // References\n  const prevDataRef = useRef();\n  const mouseFollowRef = useRef(false);\n  \n  // Reset expanded rows when data changes structure\n  useEffect(() => {\n    // Skip on first render\n    if (prevDataRef.current) {\n      // Check if data reference has changed\n      if (prevDataRef.current !== data) {\n        // Reset expanded rows state\n        setExpandedRows({});\n      }\n    }\n    \n    // Update the ref to current data\n    prevDataRef.current = data;\n  }, [data]);\n\n  // Mouse following effect for tooltips\n  useEffect(() => {\n    const handleMouseMove = (e) => {\n      // Only update tooltip position if it's visible and we're in follow mode\n      if (tooltip.visible && mouseFollowRef.current) {\n        setTooltip(prev => ({\n          ...prev,\n          x: e.clientX + 10,\n          y: e.clientY + 10\n        }));\n      }\n    };\n\n    if (tooltip.visible) {\n      document.addEventListener('mousemove', handleMouseMove);\n    }\n\n    return () => {\n      document.removeEventListener('mousemove', handleMouseMove);\n    };\n  }, [tooltip.visible]);\n\n  // Handle row click\n  const handleRowClick = (item) => {\n    if (setProps) {\n      // Update the selectedRow property\n      setProps({ selectedRow: { ...item } });\n    }\n  };\n\n  // Tooltip handlers\n  const handleShowTooltip = (e, content) => {\n    if (content) {\n      // Enable mouse following\n      mouseFollowRef.current = true;\n      \n      // Position tooltip near cursor but slightly offset\n      const x = e.clientX + 10;\n      const y = e.clientY + 10;\n      setTooltip({ content, visible: true, x, y });\n    }\n  };\n\n  const handleHideTooltip = () => {\n    // Disable mouse following\n    mouseFollowRef.current = false;\n    setTooltip(prev => ({ ...prev, visible: false }));\n  };\n\n  return (\n    <div \n      id={id}\n      className={className}\n      style={{\n        width: '100%',\n        overflow: 'auto',\n        borderRadius: '4px',\n        border: '1px solid #e5e7eb',\n        position: 'relative', // Important for tooltip positioning\n        ...style\n      }}\n    >\n      <table \n        style={{ \n          width: '100%',\n          borderCollapse: 'collapse',\n          tableLayout: 'fixed',\n          border: '1px solid #e5e7eb',\n          borderRight: 'none', // Prevents double borders\n          borderBottom: 'none' // Prevents double borders\n        }}\n      >\n        <thead>\n          <tr>\n            {columns.map((column) => (\n              <th \n                key={column.name}\n                onMouseEnter={(e) => handleShowTooltip(e, column.tooltipText)}\n                onMouseLeave={handleHideTooltip}\n                style={{\n                  padding: '12px',\n                  backgroundColor: '#f9fafb',\n                  fontWeight: '600',\n                  textAlign: column.align || 'left',\n                  borderBottom: '2px solid #e5e7eb',\n                  borderRight: 'var(--is-last-column, 1px solid #e5e7eb)',\n                  position: 'sticky',\n                  top: 0,\n                  zIndex: 1,\n                  ...(column.width ? { width: column.width } : {})\n                }}\n              >\n                <div style={{ \n                  display: 'flex', \n                  alignItems: 'center',\n                  justifyContent: column.align === 'right' ? 'flex-end' : \n                                 column.align === 'center' ? 'center' : 'flex-start'\n                }}>\n                  {column.label || column.name}\n                </div>\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item, index) => (\n            <GenericTableHierarchyRow\n              key={`${item[uniqueKey] || index}`}\n              item={item}\n              level={0}\n              columns={columns}\n              onRowClick={handleRowClick}\n              colors={colors}\n              uniqueKey={uniqueKey}\n              selectedRow={selectedRow}\n              dataKey={dataKey}\n              highlightKey={highlightKey}\n              expandedRows={expandedRows}\n              setExpandedRows={setExpandedRows}\n            />\n          ))}\n          {data.length === 0 && (\n            <tr>\n              <td \n                colSpan={columns.length}\n                style={{\n                  padding: '16px',\n                  textAlign: 'center',\n                  color: '#6b7280'\n                }}\n              >\n                No data available\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n\n      {/* Custom Tooltip */}\n      {tooltip.visible && tooltip.content && (\n        <div\n          style={{\n            position: 'fixed',\n            left: `${tooltip.x}px`,\n            top: `${tooltip.y}px`,\n            backgroundColor: 'rgb(242, 241, 241)',\n            color: 'black',\n            padding: '4px 8px',\n            borderRadius: '0',\n            fontSize: '0.8rem',\n            pointerEvents: 'none',\n            zIndex: 1000,\n            whiteSpace: 'pre-line',\n            maxWidth: '300px',\n            wordWrap: 'break-word',\n            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)',\n            border: '1px solid #ccc'\n          }}\n        >\n          {tooltip.content}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * PropTypes for the GenericTableHierarchy component\n */\nGenericTableHierarchy.propTypes = {\n  /**\n   * The ID used to identify this component.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The hierarchical data to display.\n   * Each item should have arbitrary properties and an optional children array.\n   */\n  data: PropTypes.array,\n\n  /**\n   * Array of column definitions that specify which fields to display.\n   * Each column should have a name property, and can optionally have width, label, and align.\n   * Example: [{ name: 'title', label: 'Title', width: '200px', align: 'left' }]\n   */\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    label: PropTypes.string,\n    width: PropTypes.string,\n    align: PropTypes.oneOf(['left', 'center', 'right']),\n    tooltipText: PropTypes.string\n  })),\n\n  /**\n   * Color configuration for hover and selected states.\n   */\n  colors: PropTypes.shape({\n    hoverColor: PropTypes.string,\n    selectedColor: PropTypes.string\n  }),\n\n  /**\n   * Property name in data items to use as unique identifier.\n   * Default is 'id'.\n   */\n  uniqueKey: PropTypes.string,\n\n  /**\n   * Currently selected row data.\n   */\n  selectedRow: PropTypes.object,\n\n  /**\n   * Property name to use when comparing selected row with current row.\n   * Default is the same as uniqueKey.\n   */\n  dataKey: PropTypes.string,\n\n  /**\n   * Optional secondary property to check when determining if a row should be highlighted.\n   */\n  highlightKey: PropTypes.string,\n\n  /**\n   * Inline styles to apply to the container.\n   */\n  style: PropTypes.object,\n\n  /**\n   * CSS class names to apply to the container.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Callback that should be called to report property changes.\n   */\n  setProps: PropTypes.func\n};\n\n/**\n * Default properties for the GenericTableHierarchy component.\n */\nGenericTableHierarchy.defaultProps = {\n  data: [],\n  columns: [],\n  colors: { hoverColor: '#f5f5f5', selectedColor: '#e6f7ff' },\n  uniqueKey: 'id',\n  selectedRow: null,\n  dataKey: 'id',\n  style: {},\n  className: ''\n};\n\nexport default GenericTableHierarchy;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * HierarchicalDataItem - Renders a single item in the hierarchical structure\n * \n * @param {Object} props - Component props\n * @param {Object} props.item - Item data containing name, percentage, and optional children\n * @param {number} props.level - Current nesting level for indentation\n * @param {Object} props.colors - Color configuration for bars\n * @param {React.ReactNode} props.openCaret - Icon to show when item is expanded\n * @param {React.ReactNode} props.closedCaret - Icon to show when item is collapsed\n * @param {Function} props.onRowClick - Callback function when row is clicked\n * @param {Object} props.selectedItem - Currently selected item\n * @returns {React.ReactNode} - Rendered item with optional children\n */\nconst HierarchicalDataItem = ({ \n  item, \n  level = 0, \n  colors, \n  openCaret, \n  closedCaret,\n  onRowClick,\n  selectedItem\n}) => {\n  // Track expanded/collapsed state\n  const [isExpanded, setIsExpanded] = useState(false);\n  // Track hover state for visual feedback\n  const [isHovered, setIsHovered] = useState(false);\n  // For click animation\n  const [isClicked, setIsClicked] = useState(false);\n  \n  // Determine if this item has children\n  const hasChildren = item.children && item.children.length > 0;\n  \n  // Calculate indentation based on nesting level using em instead of px\n  const indentPadding = `${level * 1}em`;\n  \n  // Check if this item is currently selected\n  const isSelected = selectedItem && selectedItem.name === item.name;\n  \n  // Toggle expanded state\n  const toggleExpand = (e) => {\n    // Stop propagation to prevent row click handler from firing\n    e.stopPropagation();\n    \n    if (hasChildren) {\n      setIsExpanded(!isExpanded);\n    }\n  };\n  \n  // Handle row click\n  const handleRowClick = () => {\n    // Play click animation\n    setIsClicked(true);\n    setTimeout(() => setIsClicked(false), 200);\n    \n    // Call the parent's click handler and pass the item data\n    if (onRowClick) {\n      onRowClick(item);\n    }\n  };\n\n  return (\n    <div style={{ width: '100%' }}>\n      {/* Item Row */}\n      <div \n        style={{ \n          width: '100%', \n          display: 'flex', \n          alignItems: 'center', \n          marginBottom: '0.25em',\n          padding: '0.5em 0',\n          backgroundColor: isSelected ? '#f0f0f0' : (isHovered ? '#f9fafb' : 'transparent'),\n          borderRadius: '0.25em',\n          cursor: 'pointer',\n          transition: 'all 0.1s ease',\n          transform: isClicked ? 'scale(0.99)' : 'scale(1)',\n        }}\n        onClick={handleRowClick}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n      >\n        {/* Indentation and Toggle Button */}\n        <div style={{ \n          display: 'flex', \n          alignItems: 'center', \n          paddingLeft: indentPadding\n        }}>\n          {hasChildren ? (\n            <button \n              onClick={toggleExpand} \n              style={{ \n                marginRight: '0.5em', \n                display: 'flex', \n                alignItems: 'center', \n                justifyContent: 'center',\n                background: 'none',\n                border: 'none',\n                cursor: 'pointer',\n                padding: '0.125em',\n                width: '1.5em'\n              }}\n              aria-expanded={isExpanded}\n              aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n            >\n              {isExpanded ? openCaret : closedCaret}\n            </button>\n          ) : (\n            <div style={{ marginRight: '0.5em', width: '1.2em' }}></div> \n          )}\n          \n          {/* Item Name */}\n          <div style={{ \n            flexGrow: 1, \n            fontWeight: 500\n          }}>\n            {item.name}\n          </div>\n        </div>\n        \n        {/* Percentage Display */}\n        <div style={{ \n          marginLeft: 'auto', \n          marginRight: \"0.5em\",\n          color: '#6b7280' \n        }}>\n          {item.percentage}%\n        </div>\n      </div>\n      \n      {/* Progress Bar - Now indented to match the text */}\n      <div style={{ display: 'flex', width: '100%' }}>\n        {/* This div creates the same indentation as the text */}\n        <div style={{ width: indentPadding, flexShrink: 0 }}></div>\n        \n        {/* Caret width equivalent space */}\n        <div style={{ width: '1.5em', flexShrink: 0 }}></div>\n        \n        {/* The actual progress bar */}\n        <div \n          style={{ \n            flex: 1,\n            height: '0.5em', \n            borderRadius: '0.25em', \n            marginBottom: '0.5em', \n            backgroundColor: colors.background \n          }}\n        >\n          <div \n            style={{ \n              height: '100%', \n              borderRadius: '0.25em', \n              width: `${item.percentage}%`, \n              backgroundColor: colors.primary\n            }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Thin line separator between rows */}\n      <div style={{ \n        width: \"100%\",\n        height: \"1px\",\n        backgroundColor: \"#e0e0e0\",\n        margin: \"0.5em 0\"\n      }} />\n      \n      {/* Render Children if Expanded */}\n      {hasChildren && isExpanded && (\n        <div style={{ width: '100%' }}>\n          {item.children.map((child, index) => (\n            <HierarchicalDataItem\n              key={`${child.name}-${index}`}\n              item={child}\n              level={level + 1}\n              colors={colors}\n              openCaret={openCaret}\n              closedCaret={closedCaret}\n              onRowClick={onRowClick}\n              selectedItem={selectedItem}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\n/**\n * SimpleHierarchy - A Dash component for displaying hierarchical data with expandable sections\n * \n * This component displays hierarchical data with collapsible sections, percentage indicators, \n * and progress bars. It is designed to be used as a Dash component.\n *\n * @param {Object} props - Component props\n * @param {string} props.id - The ID used to identify this component in Dash callbacks\n * @param {Array} props.data - Array of data items with name, percentage, and optional children\n * @param {Object} props.colors - Colors for the progress bars\n * @param {string} props.colors.primary - Color for the filled portion of progress bars\n * @param {string} props.colors.background - Color for the unfilled portion of progress bars\n * @param {Object} props.styles - Custom styles to apply to the container\n * @param {string} props.className - CSS class names to apply to the container\n * @param {Object} props.selectedItem - Currently selected item (for controlled component)\n * @param {Function} props.setProps - Dash callback to update props\n * @returns {React.ReactNode} - Rendered hierarchical data component\n */\nconst SimpleHierarchy = (props) => {\n  const { \n    id,\n    data = [], \n    colors = { primary: \"#7c3aed\", background: \"#e5e7eb\" },\n    styles = {},\n    className = '',\n    selectedItem = null,\n    setProps\n  } = props;\n\n  // Define SVG for carets to avoid external dependencies\n  // Now the openCaret points down (was pointing up before)\n  const openCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m6 9 6 6 6-6\"/>\n    </svg>\n  );\n  \n  const closedCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m9 18 6-6-6-6\"/>\n    </svg>\n  );\n\n  // Handle row click\n  const handleRowClick = (item) => {\n    if (setProps) {\n      // Create a copy of the item without the children property\n      const { children, ...itemWithoutChildren } = item;\n      \n      // Update the selectedItem property in Dash with the modified item\n      setProps({ selectedItem: itemWithoutChildren });\n    }\n  };\n\n  return (\n    <div \n      id={id}\n      className={className} \n      style={{\n        width: '100%',\n        padding: '1em',\n        border: '1px solid #e5e7eb',\n        borderRadius: '0.25em',\n        ...styles\n      }}\n    >\n      {data.map((item, index) => (\n        <HierarchicalDataItem\n          key={`${item.name}-${index}`}\n          item={item}\n          colors={colors}\n          openCaret={openCaret}\n          closedCaret={closedCaret}\n          onRowClick={handleRowClick}\n          selectedItem={selectedItem}\n        />\n      ))}\n    </div>\n  );\n};\n\n/**\n * PropTypes for the SimpleHierarchy component\n * These define the expected properties and their types for Dash\n */\nSimpleHierarchy.propTypes = {\n  /**\n   * The ID used to identify this component in Dash callbacks.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The hierarchical data to display.\n   * Each item should have a name, percentage, and optional children array.\n   */\n  data: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    percentage: PropTypes.number.isRequired,\n    children: PropTypes.array\n  })),\n\n  /**\n   * Colors for the component.\n   */\n  colors: PropTypes.shape({\n    primary: PropTypes.string,\n    background: PropTypes.string\n  }),\n\n  /**\n   * Inline styles to apply to the outer div.\n   */\n  styles: PropTypes.object,\n\n  /**\n   * CSS class names to apply to the outer div.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Dash-assigned callback that should be called to report property changes\n   * to Dash, to make them available for callbacks.\n   */\n  setProps: PropTypes.func,\n\n  /**\n   * Object representing the currently selected item (controlled component pattern).\n   * This will be updated when a row is clicked.\n   * Contains all properties of the selected item except the 'children' array.\n   */\n  selectedItem: PropTypes.object\n};\n\n/**\n * Default properties for the SimpleHierarchy component.\n */\nSimpleHierarchy.defaultProps = {\n  data: [],\n  colors: { primary: \"#7c3aed\", background: \"#e5e7eb\" },\n  styles: {},\n  selectedItem: null\n};\n\nexport default SimpleHierarchy;","import React, { useState, useRef, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * TableHierarchyRow - Renders a single row in the hierarchical table with multiple columns\n * \n * @param {Object} props - Component props\n * @param {Object} props.item - Row data containing children array and arbitrary columns\n * @param {number} props.level - Current nesting level for indentation\n * @param {Array} props.columns - Array of column objects with name and width properties\n * @param {string} props.indexColumnName - Name of the column that acts as the index (leftmost)\n * @param {React.ReactNode} props.openCaret - Icon to show when item is expanded\n * @param {React.ReactNode} props.closedCaret - Icon to show when item is collapsed\n * @param {Function} props.onRowClick - Callback function when row is clicked\n * @param {Object} props.cellStyles - Default styles for cells\n * @param {string} props.hoveredColumn - Name of column currently being hovered\n * @param {Object} props.selectedColumn - Currently selected column (for controlled component)\n * @returns {React.ReactNode} - Rendered row with optional children\n */\nconst TableHierarchyRow = ({\n  item,\n  level = 0,\n  columns,\n  indexColumnName,\n  openCaret,\n  closedCaret,\n  onRowClick,\n  cellStyles,\n  hoveredColumn,\n  selectedColumn,\n}) => {\n  // Track expanded/collapsed state\n  const [isExpanded, setIsExpanded] = useState(false);\n  \n  // Determine if this item has children\n  const hasChildren = item.children && item.children.length > 0;\n  \n  // Calculate indentation based on nesting level\n  const indentPadding = `${level * 1}em`;\n  \n  // Toggle expanded state\n  const toggleExpand = (e) => {\n    // Stop propagation to prevent row click handler from firing\n    e.stopPropagation();\n    \n    if (hasChildren) {\n      setIsExpanded(!isExpanded);\n    }\n  };\n  \n  // Handle row click\n  const handleRowClick = () => {\n    // Call the parent's click handler and pass the item data\n    if (onRowClick) {\n      onRowClick(item);\n    }\n  };\n\n  return (\n    <>\n      {/* Item Row */}\n      <tr \n        style={{ \n          cursor: 'pointer'\n        }}\n        onClick={handleRowClick}\n      >\n        {/* Index Column with Indentation and Caret */}\n        <td \n          className=\"index-column\"\n          style={{\n            ...cellStyles,\n            position: 'sticky',\n            left: 0,\n            backgroundColor: 'white',\n            zIndex: 1,\n            borderRight: '1px solid #e5e7eb',\n            boxShadow: '2px 0 4px -2px rgba(0, 0, 0, 0.1)'\n          }}\n        >\n          <div style={{ \n            display: 'flex', \n            alignItems: 'center', \n            paddingLeft: indentPadding \n          }}>\n            {hasChildren ? (\n              <button \n                onClick={toggleExpand} \n                style={{ \n                  marginRight: '0.5em', \n                  display: 'flex', \n                  alignItems: 'center', \n                  justifyContent: 'center',\n                  background: 'none',\n                  border: 'none',\n                  cursor: 'pointer',\n                  padding: '0.125em',\n                  width: '1.5em'\n                }}\n                aria-expanded={isExpanded}\n                aria-label={isExpanded ? \"Collapse\" : \"Expand\"}\n              >\n                {isExpanded ? openCaret : closedCaret}\n              </button>\n            ) : (\n              <div style={{ marginRight: '0.2em', width: '1.5em' }}></div> // Placeholder for alignment\n            )}\n            \n            {/* Item Name */}\n            <div style={{ fontWeight: 500 }}>\n              {item[indexColumnName]}\n            </div>\n          </div>\n        </td>\n        \n        {/* Other Columns */}\n        {columns\n          .filter(col => col.name !== indexColumnName)\n          .map((column) => (\n            <td \n              key={column.name} \n              style={{\n                ...cellStyles,\n                width: column.width || 'auto',\n                backgroundColor: (hoveredColumn === column.name || selectedColumn?.name === column.name) \n                  ? '#f0f7ff' // Light blue highlight\n                  : 'transparent',\n                transition: 'background-color 0.2s ease'\n              }}\n            >\n              {item[column.name] !== undefined ? item[column.name] : ''}\n            </td>\n          ))\n        }\n      </tr>\n      \n      {/* Render Children if Expanded */}\n      {hasChildren && isExpanded && (\n        <>\n          {item.children.map((child, index) => (\n            <TableHierarchyRow\n              key={`${child[indexColumnName]}-${index}`}\n              item={child}\n              level={level + 1}\n              columns={columns}\n              indexColumnName={indexColumnName}\n              openCaret={openCaret}\n              closedCaret={closedCaret}\n              onRowClick={onRowClick}\n              cellStyles={cellStyles}\n              hoveredColumn={hoveredColumn}\n              selectedColumn={selectedColumn}\n            />\n          ))}\n        </>\n      )}\n    </>\n  );\n};\n\n/**\n * TableHierarchy - A Dash component for displaying hierarchical data in a table format\n * with multiple columns, sticky headers, and expandable rows.\n * \n * This component displays hierarchical data in a table format with support for:\n * - Multiple columns\n * - Sticky index column (leftmost)\n * - Sticky headers\n * - Expandable/collapsible rows\n * - Column selection callbacks\n * - Resizable index column\n * \n * @param {Object} props - Component props\n * @param {string} props.id - The ID used to identify this component in Dash callbacks\n * @param {Array} props.data - Array of data items with arbitrary columns and optional children arrays\n * @param {Array} props.columns - Array of column definitions with name and width properties\n * @param {string} props.indexColumnName - Name of the column to use as the index (leftmost column)\n * @param {Object} props.style - Custom styles to apply to the container\n * @param {string} props.className - CSS class names to apply to the container\n * @param {Object} props.selectedItem - Currently selected item (for controlled component)\n * @param {Object} props.selectedColumn - Currently selected column (for controlled component)\n * @param {Object} props.selectedColumnHierarchy - Currently selected column in hierarchical format\n * @param {string} props.indexColumnWidth - The width of the index column \n * @param {Function} props.setProps - Dash callback to update props\n * @returns {React.ReactNode} - Rendered hierarchical table component\n */\nconst TableHierarchy = (props) => {\n  const { \n    id,\n    data = [], \n    columns = [],\n    indexColumnName,\n    style = {},\n    className = '',\n    selectedItem = null,\n    selectedColumn = null,\n    selectedColumnHierarchy = null,\n    indexColumnWidth = '200px',\n    setProps\n  } = props;\n\n  // Create a ref for the container div and table\n  const containerRef = useRef(null);\n  const tableRef = useRef(null);\n  \n  // Track which column is being hovered over\n  const [hoveredColumn, setHoveredColumn] = useState(null);\n  \n  // Track column click animation\n  const [clickedColumn, setClickedColumn] = useState(null);\n\n  // Add resize functionality after component mounts\n  useEffect(() => {\n    if (!tableRef.current) return;\n    \n    // Get the table element\n    const table = tableRef.current;\n    \n    // Function to make the first column resizable\n    const makeIndexColumnResizable = () => {\n      // Get the first row's first cell (index column header)\n      const headerRow = table.querySelector('thead tr');\n      if (!headerRow) return;\n      \n      const indexCell = headerRow.children[0];\n      if (!indexCell) return;\n      \n      // Set initial width from prop\n      indexCell.style.width = indexColumnWidth;\n      \n      // Create resizer div\n      const resizer = document.createElement('div');\n      resizer.style.position = 'absolute';\n      resizer.style.top = '0';\n      resizer.style.right = '0';\n      resizer.style.width = '5px';\n      resizer.style.height = '100%';\n      resizer.style.cursor = 'col-resize';\n      resizer.style.userSelect = 'none';\n      resizer.style.zIndex = '10';\n      \n      // Position the cell relatively for absolutely positioned resizer\n      indexCell.style.position = 'relative';\n      indexCell.appendChild(resizer);\n      \n      // Track resize state and positions\n      let isResizing = false;\n      let startX, startWidth;\n      \n      // Show visual feedback on hover\n      resizer.addEventListener('mouseover', () => {\n        resizer.style.borderRight = '2px solid #0000ff';\n      });\n      \n      resizer.addEventListener('mouseout', () => {\n        resizer.style.borderRight = '';\n      });\n      \n      // Start resizing\n      resizer.addEventListener('mousedown', (e) => {\n        // Prevent text selection during drag\n        e.preventDefault();\n        e.stopPropagation();\n        \n        // Set resizing state\n        isResizing = true;\n        \n        // Get initial positions and width\n        startX = e.clientX;\n        startWidth = indexCell.offsetWidth;\n        \n        // Add document-level event listeners\n        document.addEventListener('mousemove', onMouseMove);\n        document.addEventListener('mouseup', onMouseUp);\n      });\n      \n      // Handle resizing\n      const onMouseMove = (e) => {\n        if (!isResizing) return;\n        \n        // Calculate width change\n        const diffX = e.clientX - startX;\n        const newWidth = Math.max(100, startWidth + diffX); // Minimum 100px\n        \n        // Apply new width to the index column header\n        indexCell.style.width = `${newWidth}px`;\n        \n        // Update all cells with .index-column class to match the new width\n        const allIndexCells = table.querySelectorAll('.index-column');\n        allIndexCells.forEach(cell => {\n          cell.style.width = `${newWidth}px`;\n        });\n      };\n      \n      // End resizing\n      const onMouseUp = (e) => {\n        if (!isResizing) return;\n        \n        // Reset resizing state\n        isResizing = false;\n        \n        // Remove document-level event listeners\n        document.removeEventListener('mousemove', onMouseMove);\n        document.removeEventListener('mouseup', onMouseUp);\n        \n        // Get final width\n        const finalWidth = indexCell.offsetWidth + 'px';\n        \n        // Update the prop via setProps if available\n        if (setProps) {\n          setProps({ indexColumnWidth: finalWidth });\n        }\n      };\n    };\n    \n    // Initialize resizable functionality\n    makeIndexColumnResizable();\n    \n    // Function to enforce sticky positioning\n    const enforceStickyPositioning = () => {\n      const container = containerRef.current;\n      if (!container) return;\n      \n      // Ensure the index header and cells stay sticky when scrolling horizontally\n      container.addEventListener('scroll', () => {\n        const indexHeader = table.querySelector('thead th.index-column');\n        const indexCells = table.querySelectorAll('tbody td.index-column');\n        \n        if (indexHeader) {\n          indexHeader.style.left = `${container.scrollLeft}px`;\n        }\n        \n        indexCells.forEach(cell => {\n          cell.style.left = `${container.scrollLeft}px`;\n        });\n      });\n    };\n    \n    // Initialize sticky positioning\n    enforceStickyPositioning();\n    \n    // Clean up any event listeners if component unmounts\n    return () => {\n      const container = containerRef.current;\n      if (container) {\n        container.removeEventListener('scroll', () => {});\n      }\n    };\n  }, [tableRef.current, containerRef.current, indexColumnWidth]);\n\n  // Define SVG for carets to avoid external dependencies\n  const openCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m6 9 6 6 6-6\"/>\n    </svg>\n  );\n  \n  const closedCaret = (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n      <path d=\"m9 18 6-6-6-6\"/>\n    </svg>\n  );\n\n  // Handle row click\n  const handleRowClick = (item) => {\n    if (setProps) {\n      // Create a copy of the item without the children property\n      const { children, ...itemWithoutChildren } = item;\n      \n      // Update the selectedItem property in Dash\n      setProps({ selectedItem: itemWithoutChildren });\n    }\n  };\n\n  // Build a hierarchical structure for the selected column maintaining the original hierarchy\n  const buildColumnHierarchy = (items, columnName) => {\n    return items.map(item => {\n      // Create a new node with the index column and selected column value\n      const node = {\n        [indexColumnName]: item[indexColumnName],\n        value: item[columnName] !== undefined ? item[columnName] : null\n      };\n      \n      // Recursively build children hierarchy if they exist\n      if (item.children && item.children.length > 0) {\n        node.children = buildColumnHierarchy(item.children, columnName);\n      }\n      \n      return node;\n    });\n  };\n\n  // Handle column header click with animation\n  const handleColumnHeaderClick = (columnName) => {\n    if (columnName !== indexColumnName) {\n      // Set clicked column for animation\n      setClickedColumn(columnName);\n      \n      // Reset after animation\n      setTimeout(() => {\n        setClickedColumn(null);\n      }, 200);\n      \n      if (setProps) {\n        // For flat structure (existing selectedColumn)\n        const gatherColumnData = (items, columnName, indexColumnName, result = []) => {\n          items.forEach(item => {\n            if (item[columnName] !== undefined && item[indexColumnName] !== undefined) {\n              // Create a dictionary with index column name as key and column value\n              const rowData = {\n                [indexColumnName]: item[indexColumnName],\n                value: item[columnName]\n              };\n              result.push(rowData);\n            }\n            \n            if (item.children && item.children.length > 0) {\n              gatherColumnData(item.children, columnName, indexColumnName, result);\n            }\n          });\n          \n          return result;\n        };\n        \n        // For hierarchical structure (new selectedColumnHierarchy)\n        const hierarchicalData = buildColumnHierarchy(data, columnName);\n        \n        // Gather flat data (for backward compatibility)\n        const columnData = gatherColumnData(data, columnName, indexColumnName);\n        \n        // Update both selectedColumn (flat) and selectedColumnHierarchy (hierarchical) properties\n        setProps({ \n          selectedColumn: {\n            name: columnName,\n            data: columnData\n          },\n          selectedColumnHierarchy: {\n            name: columnName,\n            data: hierarchicalData\n          }\n        });\n      }\n    }\n  };\n  \n  // Handle column header hover\n  const handleColumnHeaderHover = (columnName) => {\n    setHoveredColumn(columnName);\n  };\n  \n  // Handle column header hover end\n  const handleColumnHeaderLeave = () => {\n    setHoveredColumn(null);\n  };\n\n  // Default styles for cells\n  const cellStyles = {\n    padding: '0.75em 1em',\n    borderBottom: '1px solid #e5e7eb',\n    whiteSpace: 'nowrap'\n  };\n\n  // Default styles for header cells\n  const headerCellStyles = {\n    ...cellStyles,\n    fontWeight: 'bold',\n    backgroundColor: 'white',\n    borderBottom: '2px solid #e5e7eb',\n    position: 'sticky',\n    top: 0,\n    zIndex: 2\n  };\n\n  // Custom CSS for ensuring proper sticky behavior\n  // This is added to ensure the stickiness works correctly across browsers\n  const stickyStyles = `\n    .index-column {\n      position: sticky !important;\n      left: 0 !important;\n      z-index: 1;\n    }\n    thead th.index-column {\n      z-index: 3 !important;\n    }\n  `;\n\n  return (\n    <div \n      id={id}\n      className={className} \n      ref={containerRef}\n      style={{\n        width: '100%',\n        maxHeight: '500px', // Default max height, can be overridden via style prop\n        overflow: 'auto',\n        position: 'relative',\n        border: '1px solid #e5e7eb',\n        borderRadius: '0.25em',\n        ...style\n      }}\n    >\n      {/* Add custom CSS styles for sticky positioning */}\n      <style>\n        {stickyStyles}\n      </style>\n      \n      <table \n        ref={tableRef}\n        className=\"resizable-table\"\n        style={{ \n          width: '100%', \n          borderCollapse: 'separate',\n          borderSpacing: 0,\n          tableLayout: 'fixed'\n        }}\n      >\n        <thead>\n          <tr>\n            {/* Index Column Header (Sticky) */}\n            <th \n              className=\"index-column\"\n              style={{\n                ...headerCellStyles,\n                position: 'sticky',\n                left: 0,\n                zIndex: 3, // Higher z-index for the corner\n                backgroundColor: 'white',\n                borderRight: '1px solid #e5e7eb',\n                width: indexColumnWidth,\n                boxShadow: '2px 0 4px -2px rgba(0, 0, 0, 0.1)'\n              }}\n            >\n              {indexColumnName}\n              {/* Resize handle will be added by useEffect */}\n            </th>\n            \n            {/* Other Column Headers */}\n            {columns\n              .filter(col => col.name !== indexColumnName)\n              .map((column) => (\n                <th \n                  key={column.name}\n                  style={{\n                    ...headerCellStyles,\n                    width: column.width || 'auto',\n                    cursor: column.name !== indexColumnName ? 'pointer' : 'default',\n                    backgroundColor: (hoveredColumn === column.name || selectedColumn?.name === column.name) \n                      ? '#e1efff' // Slightly darker blue for header highlighting\n                      : 'white',\n                    transition: 'all 0.2s ease',\n                    transform: clickedColumn === column.name ? 'scale(0.98)' : 'scale(1)',\n                  }}\n                  onClick={() => handleColumnHeaderClick(column.name)}\n                  onMouseEnter={() => handleColumnHeaderHover(column.name)}\n                  onMouseLeave={handleColumnHeaderLeave}\n                  title={column.name !== indexColumnName ? \"Click to select column\" : \"\"}\n                >\n                  {column.name}\n                </th>\n              ))\n            }\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((item, index) => (\n            <TableHierarchyRow\n              key={`${item[indexColumnName]}-${index}`}\n              item={item}\n              level={0}\n              columns={columns}\n              indexColumnName={indexColumnName}\n              openCaret={openCaret}\n              closedCaret={closedCaret}\n              onRowClick={handleRowClick}\n              cellStyles={cellStyles}\n              hoveredColumn={hoveredColumn}\n              selectedColumn={selectedColumn}\n            />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\n/**\n * PropTypes for the TableHierarchy component\n * These define the expected properties and their types for Dash\n */\nTableHierarchy.propTypes = {\n  /**\n   * The ID used to identify this component in Dash callbacks.\n   */\n  id: PropTypes.string,\n\n  /**\n   * The hierarchical data to display.\n   * Each item should have arbitrary columns and an optional children array.\n   */\n  data: PropTypes.array,\n\n  /**\n   * Array of column definitions.\n   * Each column should have a name and optional width property.\n   * Example: [{ name: 'Forecast Decomposition', width: '250px' }, { name: 'January 2024' }]\n   */\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    width: PropTypes.string\n  })),\n\n  /**\n   * Name of the column to use as the index (leftmost column).\n   * This column will be sticky when horizontally scrolling.\n   */\n  indexColumnName: PropTypes.string.isRequired,\n\n  /**\n   * Inline styles to apply to the outer div.\n   */\n  style: PropTypes.object,\n\n  /**\n   * CSS class names to apply to the outer div.\n   */\n  className: PropTypes.string,\n\n  /**\n   * Object representing the currently selected item (controlled component pattern).\n   * This will be updated when a row is clicked.\n   * Contains all properties of the selected item except the 'children' array.\n   */\n  selectedItem: PropTypes.object,\n\n  /**\n   * Object representing the currently selected column (controlled component pattern).\n   * This will be updated when a column header is clicked.\n   * Contains the column name and data which is an array of objects with the index column value and the value for this column.\n   */\n  selectedColumn: PropTypes.shape({\n    name: PropTypes.string,\n    data: PropTypes.arrayOf(PropTypes.object)\n  }),\n\n  /**\n   * Object representing the currently selected column in hierarchical format.\n   * This preserves the original hierarchy of the data structure.\n   * Each node contains the index column value, the selected column value, and any children.\n   */\n  selectedColumnHierarchy: PropTypes.shape({\n    name: PropTypes.string,\n    data: PropTypes.array\n  }),\n\n  /**\n   * Width of the index column (leftmost column).\n   * Can be updated by the user via drag-to-resize.\n   */\n  indexColumnWidth: PropTypes.string,\n\n  /**\n   * Dash-assigned callback that should be called to report property changes\n   * to Dash, to make them available for callbacks.\n   */\n  setProps: PropTypes.func\n};\n\n/**\n * Default properties for the TableHierarchy component.\n */\nTableHierarchy.defaultProps = {\n  data: [],\n  columns: [],\n  style: {},\n  selectedItem: null,\n  selectedColumn: null,\n  selectedColumnHierarchy: null,\n  indexColumnWidth: '200px'\n};\n\nexport default TableHierarchy;"],"names":["url","__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","getCurrentScript","script","document","currentScript","doc_scripts","getElementsByTagName","scripts","i","length","push","filter","s","async","text","textContent","slice","src","split","join","jsonpScriptSrc","__jsonpScriptSrc__","chunkId","isLocal","test","srcFragments","fileFragments","splice","window","GenericTableHierarchyRow","_ref","item","_ref$level","level","columns","onRowClick","colors","uniqueKey","selectedRow","dataKey","highlightKey","expandedRows","setExpandedRows","_useState2","_slicedToArray","useState","isHovered","setIsHovered","hasChildren","children","indentPadding","concat","rowId","JSON","stringify","isExpanded","toggleExpand","e","stopPropagation","prev","newExpandedRows","_objectSpread","isSelected","React","onMouseEnter","onMouseLeave","onClick","style","cursor","backgroundColor","selectedColor","hoverColor","transition","map","column","colIndex","cellValue","undefined","name","isFirstColumn","padding","borderBottom","borderRight","textAlign","align","width","display","alignItems","paddingLeft","background","border","height","justifyContent","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","marginLeft","child","index","_GenericTableHierarchyRow","GenericTableHierarchy","props","id","_props$data","data","_props$columns","_props$colors","_props$uniqueKey","_props$selectedRow","_props$dataKey","_props$highlightKey","_props$style","_props$className","className","setProps","_useState4","_useState6","content","visible","x","y","tooltip","setTooltip","prevDataRef","useRef","mouseFollowRef","useEffect","current","handleMouseMove","clientX","clientY","addEventListener","removeEventListener","handleRowClick","handleHideTooltip","overflow","borderRadius","position","borderCollapse","tableLayout","handleShowTooltip","tooltipText","fontWeight","top","zIndex","label","colSpan","color","left","fontSize","pointerEvents","whiteSpace","maxWidth","wordWrap","boxShadow","propTypes","PropTypes","isRequired","defaultProps","HierarchicalDataItem","openCaret","closedCaret","selectedItem","setIsExpanded","isClicked","setIsClicked","marginBottom","transform","setTimeout","marginRight","flexGrow","percentage","flexShrink","flex","primary","margin","_HierarchicalDataItem","SimpleHierarchy","_props$styles","styles","_props$selectedItem","xmlns","itemWithoutChildren","_objectWithoutProperties","_excluded","TableHierarchyRow","indexColumnName","cellStyles","hoveredColumn","selectedColumn","col","_TableHierarchyRow","TableHierarchy","_props$selectedColumn","_props$indexColumnWid","selectedColumnHierarchy","indexColumnWidth","containerRef","tableRef","setHoveredColumn","clickedColumn","setClickedColumn","container","table","headerRow","querySelector","indexCell","resizer","createElement","right","userSelect","appendChild","startX","startWidth","isResizing","preventDefault","offsetWidth","onMouseMove","onMouseUp","diffX","newWidth","Math","max","querySelectorAll","forEach","cell","finalWidth","makeIndexColumnResizable","indexHeader","indexCells","scrollLeft","buildColumnHierarchy","items","columnName","node","_defineProperty","handleColumnHeaderLeave","headerCellStyles","ref","maxHeight","borderSpacing","gatherColumnData","result","arguments","rowData","hierarchicalData","columnData","handleColumnHeaderClick","title"],"sourceRoot":""}